let DSIOF = ./Type

let Handle = ../../Handle/Type

let IOMode = ../IOMode

let compose = https://prelude.dhall-lang.org/Function/compose

let map
    : ∀(a : Type) → ∀(b : Type) → (a → b) → DSIOF a → DSIOF b
    =   λ(a : Type)
      → λ(b : Type)
      → λ(f : a → b)
      → λ(d0 : DSIOF a)
      → merge
        { DSHGetLine =
              λ(d : { handle : Handle, continue : Text → a })
            → (DSIOF b).DSHGetLine
              (d ⫽ { continue = compose Text a b d.continue f })
        , DSHPutStr =
              λ(d : { handle : Handle, text : Text, continue : a })
            → (DSIOF b).DSHPutStr (d ⫽ { continue = f d.continue })
        , DSOpenFile =
              λ(d : { path : Text, ioMode : IOMode, continue : Handle → a })
            → (DSIOF b).DSOpenFile
              (d ⫽ { continue = compose Handle a b d.continue f })
        , DSHClose =
              λ(d : { handle : Handle, continue : a })
            → (DSIOF b).DSHClose (d ⫽ { continue = f d.continue })
        , DSFFI =
              λ(d : { ffi : Text, continue : Text → a })
            → (DSIOF b).DSFFI (d ⫽ { continue = compose Text a b d.continue f })
        }
        d0

in  map
